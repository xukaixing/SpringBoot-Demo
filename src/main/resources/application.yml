# =====================================
# @Desc: springboot工程配置文件，使用yml方式
#        包括：server、datasource(druid)、jpa配置
# @Auther: andy.ten@tom.com
# @Date: 2020/6/18 9:39 上午
# @Version: v1.0.1
# =====================================
spring:
  #热部署devtools配置,实际使用效果不如JRebel插件
  #  devtools:
  #    restart:
  #      enabled: true  #设置开启热部署
  #      additional-paths: src/main/java #重启目录
  #      exclude: WEB-INF/**
  #  freemarker:
  #    cache: false    #页面不加载缓存，修改即时生效

  #数据源配置
  datasource:
    #driver-class-name: com.mysql.jdbc.Driver
    #如果pom中使用druid-spring-boot-starter，则驱动需要更换为：cj.jdbc.Driver
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/sprbdemo?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: 123456
    #druid连接池配置，在/druid/index.html可以查看监控页
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      #初始化时建立物理连接的个数
      initial-size: 5
      #最小连接池数量
      min-idle: 5
      #最大连接池数量 maxIdle已经不再使用
      max-active: 20
      #获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      #申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      #既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      #销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
      min-evictable-idle-time-millis: 30000
      #用来检测连接是否有效的sql 必须是一个查询语句
      #mysql中为 select 'x'
      #oracle中为 select 1 from dual
      validation-query: select 'x'
      #申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      #当数据库抛出不可恢复的异常时,抛弃该连接
      #exception-sorter: true
      #是否缓存preparedStatement,mysql5.5+建议开启
      pool-prepared-statements: true
      #当值大于0时poolPreparedStatements会自动修改为true
      max-pool-prepared-statement-per-connection-size: 20
      #配置扩展插件
      filters: stat,wall,slf4j
      #通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      #合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      #设置访问druid监控页的账号和密码,默认没有
      stat-view-servlet:
        login-username: admin
        login-password: admin123

  #JPA配置
  jpa:
    database: mysql
    properties:
      hibernate:
        #hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建、更新、验证数据库表结构，有四个值：create、create-drop、update、validate
        #create：每次加载 Hibernate 时都会删除上一次生成的表，然后根据 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
        #create-drop：每次加载 Hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭，表就自动删除。
        #update：最常用的属性，第一次加载 Hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 Hibernate 时根据 model 类自动更新表结构，即使表结构改变了，但表中的行仍然存在，不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
        #validate ：每次加载 Hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
        hbm2ddl:
          auto: update
        #dialect 主要是指定生成表名的存储引擎为 InnoDB
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format_sql: true
    #show-sql 是否在日志中打印出自动生成的 SQL，方便调试的时候查看
    show-sql: true

  #thymeleaf配置
  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    servlet:
      content-type: text/html
server:
  port: 8888 #访问端口号
  servlet:
    context-path: /sprb #访问路径
